// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0 (
        ap_clk,
        ap_rst,
        data_V_read,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [31:0] data_V_read;
output  [22:0] ap_return_0;
output  [22:0] ap_return_1;
output  [22:0] ap_return_2;
output  [22:0] ap_return_3;
input   ap_ce;

reg[22:0] ap_return_0;
reg[22:0] ap_return_1;
reg[22:0] ap_return_2;
reg[22:0] ap_return_3;

wire   [43:0] mul_ln728_fu_65_p2;
reg   [43:0] mul_ln728_reg_148;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [43:0] mul_ln728_1_fu_67_p2;
reg   [43:0] mul_ln728_1_reg_152;
wire   [43:0] mul_ln728_2_fu_64_p2;
reg   [43:0] mul_ln728_2_reg_156;
wire   [43:0] mul_ln728_3_fu_66_p2;
reg   [43:0] mul_ln728_3_reg_160;
wire  signed [31:0] mul_ln728_2_fu_64_p0;
wire  signed [43:0] sext_ln1118_fu_165_p1;
wire    ap_block_pp0_stage0;
wire  signed [31:0] mul_ln728_fu_65_p0;
wire  signed [31:0] mul_ln728_3_fu_66_p0;
wire  signed [31:0] mul_ln728_1_fu_67_p0;
wire   [51:0] shl_ln_fu_173_p3;
wire   [51:0] shl_ln728_1_fu_181_p3;
wire   [51:0] shl_ln728_2_fu_189_p3;
wire   [51:0] shl_ln728_3_fu_197_p3;
wire   [51:0] p_Val2_s_fu_205_p2;
wire   [51:0] acc_1_V_fu_211_p2;
wire   [51:0] acc_2_V_fu_217_p2;
wire   [51:0] acc_3_V_fu_223_p2;
reg    ap_ce_reg;
reg   [22:0] ap_return_0_int_reg;
reg   [22:0] ap_return_1_int_reg;
reg   [22:0] ap_return_2_int_reg;
reg   [22:0] ap_return_3_int_reg;

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_0_int_reg <= {{p_Val2_s_fu_205_p2[51:29]}};
        ap_return_1_int_reg <= {{acc_1_V_fu_211_p2[51:29]}};
        ap_return_2_int_reg <= {{acc_2_V_fu_217_p2[51:29]}};
        ap_return_3_int_reg <= {{acc_3_V_fu_223_p2[51:29]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1))) begin
        mul_ln728_1_reg_152[43 : 3] <= mul_ln728_1_fu_67_p2[43 : 3];
        mul_ln728_2_reg_156[43 : 1] <= mul_ln728_2_fu_64_p2[43 : 1];
        mul_ln728_3_reg_160 <= mul_ln728_3_fu_66_p2;
        mul_ln728_reg_148[43 : 1] <= mul_ln728_fu_65_p2[43 : 1];
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return_0 = ap_return_0_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return_0 = {{p_Val2_s_fu_205_p2[51:29]}};
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return_1 = ap_return_1_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return_1 = {{acc_1_V_fu_211_p2[51:29]}};
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return_2 = ap_return_2_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return_2 = {{acc_2_V_fu_217_p2[51:29]}};
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return_3 = ap_return_3_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return_3 = {{acc_3_V_fu_223_p2[51:29]}};
    end
end

assign acc_1_V_fu_211_p2 = ($signed(shl_ln728_1_fu_181_p3) + $signed(52'd4483791238201344));

assign acc_2_V_fu_217_p2 = (shl_ln728_2_fu_189_p3 + 52'd21990232555520);

assign acc_3_V_fu_223_p2 = ($signed(shl_ln728_3_fu_197_p3) + $signed(52'd4486677456224256));

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign mul_ln728_1_fu_67_p0 = sext_ln1118_fu_165_p1;

assign mul_ln728_1_fu_67_p2 = ($signed(mul_ln728_1_fu_67_p0) * $signed('h3EE8));

assign mul_ln728_2_fu_64_p0 = sext_ln1118_fu_165_p1;

assign mul_ln728_2_fu_64_p2 = ($signed(mul_ln728_2_fu_64_p0) * $signed('h3302));

assign mul_ln728_3_fu_66_p0 = sext_ln1118_fu_165_p1;

assign mul_ln728_3_fu_66_p2 = ($signed(mul_ln728_3_fu_66_p0) * $signed(-44'h2151));

assign mul_ln728_fu_65_p0 = sext_ln1118_fu_165_p1;

assign mul_ln728_fu_65_p2 = ($signed(mul_ln728_fu_65_p0) * $signed('h3D8A));

assign p_Val2_s_fu_205_p2 = ($signed(shl_ln_fu_173_p3) + $signed(52'd4480922200047616));

assign sext_ln1118_fu_165_p1 = $signed(data_V_read);

assign shl_ln728_1_fu_181_p3 = {{mul_ln728_1_reg_152}, {8'd0}};

assign shl_ln728_2_fu_189_p3 = {{mul_ln728_2_reg_156}, {8'd0}};

assign shl_ln728_3_fu_197_p3 = {{mul_ln728_3_reg_160}, {8'd0}};

assign shl_ln_fu_173_p3 = {{mul_ln728_reg_148}, {8'd0}};

always @ (posedge ap_clk) begin
    mul_ln728_reg_148[0] <= 1'b0;
    mul_ln728_1_reg_152[2:0] <= 3'b000;
    mul_ln728_2_reg_156[0] <= 1'b0;
end

endmodule //dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0
