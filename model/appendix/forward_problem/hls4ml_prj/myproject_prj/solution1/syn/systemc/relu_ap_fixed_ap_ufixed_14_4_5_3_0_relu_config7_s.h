// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _relu_ap_fixed_ap_ufixed_14_4_5_3_0_relu_config7_s_HH_
#define _relu_ap_fixed_ap_ufixed_14_4_5_3_0_relu_config7_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct relu_ap_fixed_ap_ufixed_14_4_5_3_0_relu_config7_s : public sc_module {
    // Port declarations 17
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<64> > data_0_V_read;
    sc_in< sc_lv<64> > data_1_V_read;
    sc_in< sc_lv<64> > data_2_V_read;
    sc_in< sc_lv<64> > data_3_V_read;
    sc_in< sc_lv<64> > data_4_V_read;
    sc_in< sc_lv<64> > data_5_V_read;
    sc_in< sc_lv<64> > data_6_V_read;
    sc_in< sc_lv<64> > data_7_V_read;
    sc_out< sc_lv<14> > ap_return_0;
    sc_out< sc_lv<14> > ap_return_1;
    sc_out< sc_lv<14> > ap_return_2;
    sc_out< sc_lv<14> > ap_return_3;
    sc_out< sc_lv<14> > ap_return_4;
    sc_out< sc_lv<14> > ap_return_5;
    sc_out< sc_lv<14> > ap_return_6;
    sc_out< sc_lv<14> > ap_return_7;


    // Module declarations
    relu_ap_fixed_ap_ufixed_14_4_5_3_0_relu_config7_s(sc_module_name name);
    SC_HAS_PROCESS(relu_ap_fixed_ap_ufixed_14_4_5_3_0_relu_config7_s);

    ~relu_ap_fixed_ap_ufixed_14_4_5_3_0_relu_config7_s();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<1> > icmp_ln1494_fu_94_p2;
    sc_signal< sc_lv<14> > trunc_ln_fu_100_p4;
    sc_signal< sc_lv<1> > icmp_ln1494_1_fu_118_p2;
    sc_signal< sc_lv<14> > trunc_ln708_1_fu_124_p4;
    sc_signal< sc_lv<1> > icmp_ln1494_2_fu_142_p2;
    sc_signal< sc_lv<14> > trunc_ln708_2_fu_148_p4;
    sc_signal< sc_lv<1> > icmp_ln1494_3_fu_166_p2;
    sc_signal< sc_lv<14> > trunc_ln708_3_fu_172_p4;
    sc_signal< sc_lv<1> > icmp_ln1494_4_fu_190_p2;
    sc_signal< sc_lv<14> > trunc_ln708_4_fu_196_p4;
    sc_signal< sc_lv<1> > icmp_ln1494_5_fu_214_p2;
    sc_signal< sc_lv<14> > trunc_ln708_5_fu_220_p4;
    sc_signal< sc_lv<1> > icmp_ln1494_6_fu_238_p2;
    sc_signal< sc_lv<14> > trunc_ln708_6_fu_244_p4;
    sc_signal< sc_lv<1> > icmp_ln1494_7_fu_262_p2;
    sc_signal< sc_lv<14> > trunc_ln708_7_fu_268_p4;
    sc_signal< sc_lv<14> > select_ln1494_fu_110_p3;
    sc_signal< sc_lv<14> > select_ln1494_48_fu_134_p3;
    sc_signal< sc_lv<14> > select_ln1494_49_fu_158_p3;
    sc_signal< sc_lv<14> > select_ln1494_50_fu_182_p3;
    sc_signal< sc_lv<14> > select_ln1494_51_fu_206_p3;
    sc_signal< sc_lv<14> > select_ln1494_52_fu_230_p3;
    sc_signal< sc_lv<14> > select_ln1494_53_fu_254_p3;
    sc_signal< sc_lv<14> > select_ln1494_54_fu_278_p3;
    static const sc_logic ap_const_logic_1;
    static const bool ap_const_boolean_1;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<32> ap_const_lv32_26;
    static const sc_lv<32> ap_const_lv32_33;
    static const sc_lv<14> ap_const_lv14_0;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_ap_return_2();
    void thread_ap_return_3();
    void thread_ap_return_4();
    void thread_ap_return_5();
    void thread_ap_return_6();
    void thread_ap_return_7();
    void thread_icmp_ln1494_1_fu_118_p2();
    void thread_icmp_ln1494_2_fu_142_p2();
    void thread_icmp_ln1494_3_fu_166_p2();
    void thread_icmp_ln1494_4_fu_190_p2();
    void thread_icmp_ln1494_5_fu_214_p2();
    void thread_icmp_ln1494_6_fu_238_p2();
    void thread_icmp_ln1494_7_fu_262_p2();
    void thread_icmp_ln1494_fu_94_p2();
    void thread_select_ln1494_48_fu_134_p3();
    void thread_select_ln1494_49_fu_158_p3();
    void thread_select_ln1494_50_fu_182_p3();
    void thread_select_ln1494_51_fu_206_p3();
    void thread_select_ln1494_52_fu_230_p3();
    void thread_select_ln1494_53_fu_254_p3();
    void thread_select_ln1494_54_fu_278_p3();
    void thread_select_ln1494_fu_110_p3();
    void thread_trunc_ln708_1_fu_124_p4();
    void thread_trunc_ln708_2_fu_148_p4();
    void thread_trunc_ln708_3_fu_172_p4();
    void thread_trunc_ln708_4_fu_196_p4();
    void thread_trunc_ln708_5_fu_220_p4();
    void thread_trunc_ln708_6_fu_244_p4();
    void thread_trunc_ln708_7_fu_268_p4();
    void thread_trunc_ln_fu_100_p4();
};

}

using namespace ap_rtl;

#endif
